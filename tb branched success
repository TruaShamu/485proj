library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;
entity testbench is
end testbench;
architecture behavior of testbench is
    -- Signals for the Register_File inputs and outputs
    signal ReadRegister1 : std_logic_vector(4 downto 0);
    signal ReadRegister2 : std_logic_vector(4 downto 0);
    signal WriteRegister : std_logic_vector(4 downto 0);
    signal WriteData     : std_logic_vector(31 downto 0);
    signal RegWrite      : std_logic;
    signal ReadData1     : std_logic_vector(31 downto 0);
    signal ReadData2     : std_logic_vector(31 downto 0);
    
    -- Signals for ALU32
    signal ALUCtrl       : std_logic_vector(3 downto 0);
    signal ALU_result    : std_logic_vector(31 downto 0);
    signal result        : std_logic;  -- Changed to std_logic for condition
    
    -- Variables to store register values
    signal rega          : std_logic_vector(31 downto 0);
    signal regb          : std_logic_vector(31 downto 0);
    
    -- New signals
    signal destination   : std_logic_vector(31 downto 0) := X"00000200";  -- Hex 200
    signal pc           : std_logic_vector(31 downto 0) := X"00000064";  -- Arbitrary value
    
    -- Component Declaration for Register_File
    component Register_File
        port(
            ReadRegister1 : IN std_logic_vector(4 downto 0);
            ReadRegister2 : IN std_logic_vector(4 downto 0);
            WriteRegister : IN std_logic_vector(4 downto 0);
            WriteData     : IN std_logic_vector(31 downto 0);
            RegWrite      : IN std_logic;
            ReadData1     : OUT std_logic_vector(31 downto 0);
            ReadData2     : OUT std_logic_vector(31 downto 0)
        );
    end component;
    -- Component Declaration for ALU32
    component ALU32
        port(
            a       : in  std_logic_vector(31 downto 0);
            b       : in  std_logic_vector(31 downto 0);
            ALUctrl : in  std_logic_vector(3 downto 0);
            rslt32  : out std_logic_vector(31 downto 0);
            cond    : out std_logic
        );
    end component;
begin
    -- Instantiate the Register_File
    reg_file: Register_File
        port map (
            ReadRegister1 => ReadRegister1,
            ReadRegister2 => ReadRegister2,
            WriteRegister => WriteRegister,
            WriteData     => WriteData,
            RegWrite      => RegWrite,
            ReadData1     => ReadData1,
            ReadData2     => ReadData2
        );
    -- Instantiate the ALU32
    alu: ALU32
        port map (
            a       => rega,
            b       => regb,
            ALUctrl => ALUCtrl,
            rslt32  => ALU_result,
            cond    => result
        );
    -- Testbench process
    stimulus: process
    begin
        -- Initialize signals
        RegWrite <= '0';  -- Disable writing
        WriteData <= (others => '0');
        WriteRegister <= (others => '0');
        -- 1. Read from register 1
        ReadRegister1 <= "00001";  -- Register 1
        ReadRegister2 <= "00010";  -- Register 2
        wait for 10 ns;
        regb <= ReadData1;  -- Store in regb
        rega <= ReadData2;  -- Store in rega
        report "Read Register 2 (rega) : " & to_hstring(rega);
        report "Read Register 2 (regb) : " & to_hstring(regb);
        -- 3. Set ALUCtrl to 0111
        ALUCtrl <= "0111";
        wait for 10 ns;
        
        -- 4. Check condition and update PC
        if result = '0' then
            pc <= std_logic_vector(unsigned(pc) + 4);
        else
            pc <= destination;
        end if;
        
        -- 5. Write result to register 3
        WriteRegister <= "00011";  -- Register 3
        RegWrite <= '1';
        wait for 10 ns;
        
        -- End simulation
        wait;
    end process;
end behavior;
